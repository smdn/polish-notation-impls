# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: "2022 smdn <smdn@smdn.jp>"

name: Run tests for demo

on:
  push:
    branches: [main]
    paths:
      - "src/impls/javascript/*.js"
      - "src/impls/javascript/*.mjs"
      - "src/demo/contents/*.js"
      - "src/demo/contents/*.mjs"
      - "tests/demo/**/*"
      - "!tests/demo/.*"
      - "!tests/demo/README.md"
  pull_request:
    types:
      - opened
      - review_requested
      - synchronize
    paths:
      - "src/impls/javascript/*.js"
      - "src/impls/javascript/*.mjs"
      - "src/demo/contents/*.js"
      - "src/demo/contents/*.mjs"
      - "tests/demo/**/*"
      - "!tests/demo/.*"
      - "!tests/demo/README.md"
  workflow_dispatch:
    inputs:
      verbose:
        description: "If true, enables verbose output."
        required: false
        type: boolean
        default: false

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_SDK_MINIMUM_VERSION: "6.0.200"
  NODEJS_MINIMUM_VERSION: 18

jobs:
  run-tests:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3.0.2
        with:
          persist-credentials: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check .NET SDK version
        id: dotnet-sdk-version
        shell: pwsh
        run: |
          $installed_version = [System.Version]::Parse($(dotnet --version))
          $required_version  = [System.Version]::Parse($Env:DOTNET_SDK_MINIMUM_VERSION)

          if ( $required_version -gt $installed_version ) {
            # required SDK version is not installed
            "::notice::.NET SDK version: installed ${installed_version}, required ${required_version}"

            "::set-output name=install::${required_version}"
          }

      - name: Setup .NET SDK ${{ steps.dotnet-sdk-version.outputs.install }}
        if: ${{ steps.dotnet-sdk-version.outputs.install != '' }}
        uses: actions/setup-dotnet@v2.0.0
        with:
          dotnet-version: "${{ steps.dotnet-sdk-version.outputs.install }}"

      - name: Install .NET tool dependencies
        continue-on-error: true
        run: dotnet tool install -g dotnet-script

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODEJS_MINIMUM_VERSION }}
          cache: npm

      - name: Setup node modules cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-cache-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install script dependencies
        run:
          cd tests/demo/
          npm install

      - name: Run tests
        shell: pwsh
        run: |
          # $verbose = '${{ inputs.verbose }}' -ieq 'true'

          pwsh tests/demo/run-tests.ps1
