{
  "Name": "Test cases of calculable expressions",
  "TestCases": [
    { "Input": "1",                 "ExpectedCalculationResult": "1",   "ExpectedExitCode": 0 },
    { "Input": "(1)",               "ExpectedCalculationResult": "1",   "ExpectedExitCode": 0 },
    { "Input": "((1))",             "ExpectedCalculationResult": "1",   "ExpectedExitCode": 0 },
    { "Input": "1+2",               "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "(1+2)",             "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "((1+2))",           "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "1+(2)",             "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "(1)+2",             "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "(1)+(2)",           "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "((1)+(2))",         "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "(((1)+(2)))",       "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "((((1))+((2))))",   "ExpectedCalculationResult": "3",   "ExpectedExitCode": 0 },
    { "Input": "10-3+2",            "ExpectedCalculationResult": "9",   "ExpectedExitCode": 0 }, // is treated as expression "(10-3)+2"
    { "Input": "(10-3)+2",          "ExpectedCalculationResult": "9",   "ExpectedExitCode": 0 },
    { "Input": "10+3-2",            "ExpectedCalculationResult": "11",  "ExpectedExitCode": 0 }, // is treated as expression "(10+3)-2"
    { "Input": "(10-3)+2",          "ExpectedCalculationResult": "9",   "ExpectedExitCode": 0 },
    { "Input": "1-3+2",             "ExpectedCalculationResult": "0",   "ExpectedExitCode": 0 }, // is treated as expression "(1-3)+2"
    { "Input": "1-3+2-4",           "ExpectedCalculationResult": "-4",  "ExpectedExitCode": 0 }, // is treated as expression "((1-3)+2)-4"
    { "Input": "2+5*3-4",           "ExpectedCalculationResult": "13",  "ExpectedExitCode": 0 },
    { "Input": "(2+5)*3-4",         "ExpectedCalculationResult": "17",  "ExpectedExitCode": 0 },
    { "Input": "2+5*(3-4)",         "ExpectedCalculationResult": "-3",  "ExpectedExitCode": 0 },
    { "Input": "2+(5*3-4)",         "ExpectedCalculationResult": "13",  "ExpectedExitCode": 0 },
    { "Input": "(2+5*3)-4",         "ExpectedCalculationResult": "13",  "ExpectedExitCode": 0 },
    { "Input": "(2+5)*(3-4)",       "ExpectedCalculationResult": "-7",  "ExpectedExitCode": 0 },
    { "Input": "((2+(5*3))-4)",     "ExpectedCalculationResult": "13",  "ExpectedExitCode": 0 },
    { "Input": "1+4*2+(7-3)/2",     "ExpectedCalculationResult": "11",  "ExpectedExitCode": 0 },
    { "Input": "1+4*(2+(7-3))/2",   "ExpectedCalculationResult": "13",  "ExpectedExitCode": 0 },

    /*
     * numeric formatting
     */
    { "Input": "1*1.5", "ExpectedCalculationResult": "1.5" },
    { "Input": "3/2",   "ExpectedCalculationResult": "1.5" },
    { "Input": "1/2",   "ExpectedCalculationResult": "0.5" },
    { "Input": "1/4",   "ExpectedCalculationResult": "0.25" },
    { "Input": "1/8",   "ExpectedCalculationResult": "0.125" },

    // test cases for floating point formatting equivalent to '%.17g' of C printf
    { "Input": "1/3",   "ExpectedCalculationResult": "0.33333333333333331", "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "2/3",   "ExpectedCalculationResult": "0.66666666666666663", "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "1/7",   "ExpectedCalculationResult": "0.14285714285714285", "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "10000000000000000/1",           "ExpectedCalculationResult": "10000000000000000",       "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "1/10000000000000000",           "ExpectedCalculationResult": "9.9999999999999998e-17",  "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "99999999999999999/1",           "ExpectedCalculationResult": "1e+17",                   "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "(3/2)*(10000000000000000/1)",   "ExpectedCalculationResult": "15000000000000000",       "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },
    { "Input": "(3/2)/(10000000000000000/1)",   "ExpectedCalculationResult": "1.5e-16",                 "TargetImplementations": [ "c", "csharp", "python", "visualbasic" ] },

    // test cases for floating point formatting specific to Intl.NumberFormat and/or java.text.NumberFormat (maximumSignificantDigits = 17)
    { "Input": "1/3",   "ExpectedCalculationResult": "0.3333333333333333",  "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "2/3",   "ExpectedCalculationResult": "0.6666666666666666",  "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "1/7",   "ExpectedCalculationResult": "0.14285714285714285", "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "10000000000000000/1",           "ExpectedCalculationResult": "10000000000000000",   "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "1/10000000000000000",           "ExpectedCalculationResult": "0.0000000000000001",  "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "99999999999999999/1",           "ExpectedCalculationResult": "100000000000000000",  "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "(3/2)*(10000000000000000/1)",   "ExpectedCalculationResult": "15000000000000000",   "TargetImplementations": [ "java", "javascript" ] },
    { "Input": "(3/2)/(10000000000000000/1)",   "ExpectedCalculationResult": "0.00000000000000015", "TargetImplementations": [ "java", "javascript" ] },

    /*
     * expression which contains space
     */
    { "Input": " 1+2",        "ExpectedCalculationResult": "3" },
    { "Input": "1+2 ",        "ExpectedCalculationResult": "3" },
    { "Input": " 1+2 ",       "ExpectedCalculationResult": "3" },
    { "Input": "1 +2",        "ExpectedCalculationResult": "3" },
    { "Input": "1+ 2",        "ExpectedCalculationResult": "3" },
    { "Input": "1 + 2",       "ExpectedCalculationResult": "3" },
    { "Input": " 1 + 2 ",     "ExpectedCalculationResult": "3" },
    { "Input": " ( 1 + 2) ",  "ExpectedCalculationResult": "3" },

    /*
     * implicit multiplication
     */
    { "Input": "2(1+2)",      "ExpectedCalculationResult": "2(1+2)", "ExpectedExitCode": 0 },
    { "Input": "x=2(1+2)",    "ExpectedCalculationExpression": "x=2(1+2)", "ExpectedExitCode": 2 },
  ]
}
